# coding: utf-8

"""
    Merge HRIS API

    The unified API for building rich integrations with multiple HR Information System platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from MergeHRISClient.configuration import Configuration


class PayCurrencyEnum(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    XUA = "XUA"
    AFN = "AFN"
    DZD = "DZD"
    ARS = "ARS"
    AMD = "AMD"
    AWG = "AWG"
    AUD = "AUD"
    AZN = "AZN"
    BSD = "BSD"
    BHD = "BHD"
    THB = "THB"
    PAB = "PAB"
    BBD = "BBD"
    BYN = "BYN"
    BYR = "BYR"
    BZD = "BZD"
    BMD = "BMD"
    BTN = "BTN"
    VEF = "VEF"
    BOB = "BOB"
    XBA = "XBA"
    BRL = "BRL"
    BND = "BND"
    BGN = "BGN"
    BIF = "BIF"
    XOF = "XOF"
    XAF = "XAF"
    XPF = "XPF"
    CAD = "CAD"
    CVE = "CVE"
    KYD = "KYD"
    CLP = "CLP"
    XTS = "XTS"
    COP = "COP"
    KMF = "KMF"
    CDF = "CDF"
    BAM = "BAM"
    NIO = "NIO"
    CRC = "CRC"
    HRK = "HRK"
    CUP = "CUP"
    CUC = "CUC"
    CZK = "CZK"
    GMD = "GMD"
    DKK = "DKK"
    MKD = "MKD"
    DJF = "DJF"
    STD = "STD"
    DOP = "DOP"
    VND = "VND"
    XCD = "XCD"
    EGP = "EGP"
    SVC = "SVC"
    ETB = "ETB"
    EUR = "EUR"
    XBB = "XBB"
    XBD = "XBD"
    XBC = "XBC"
    FKP = "FKP"
    FJD = "FJD"
    HUF = "HUF"
    GHS = "GHS"
    GIP = "GIP"
    XAU = "XAU"
    XFO = "XFO"
    PYG = "PYG"
    GNF = "GNF"
    GYD = "GYD"
    HTG = "HTG"
    HKD = "HKD"
    UAH = "UAH"
    ISK = "ISK"
    INR = "INR"
    IRR = "IRR"
    IQD = "IQD"
    IMP = "IMP"
    JMD = "JMD"
    JOD = "JOD"
    KES = "KES"
    PGK = "PGK"
    LAK = "LAK"
    KWD = "KWD"
    AOA = "AOA"
    MMK = "MMK"
    GEL = "GEL"
    LVL = "LVL"
    LBP = "LBP"
    ALL = "ALL"
    HNL = "HNL"
    SLL = "SLL"
    LSL = "LSL"
    LRD = "LRD"
    LYD = "LYD"
    SZL = "SZL"
    LTL = "LTL"
    MGA = "MGA"
    MWK = "MWK"
    MYR = "MYR"
    TMM = "TMM"
    MUR = "MUR"
    MZN = "MZN"
    MXV = "MXV"
    MXN = "MXN"
    MDL = "MDL"
    MAD = "MAD"
    BOV = "BOV"
    NGN = "NGN"
    ERN = "ERN"
    NAD = "NAD"
    NPR = "NPR"
    ANG = "ANG"
    ILS = "ILS"
    RON = "RON"
    TWD = "TWD"
    NZD = "NZD"
    KPW = "KPW"
    NOK = "NOK"
    PEN = "PEN"
    MRO = "MRO"
    TOP = "TOP"
    PKR = "PKR"
    XPD = "XPD"
    MOP = "MOP"
    PHP = "PHP"
    XPT = "XPT"
    GBP = "GBP"
    BWP = "BWP"
    QAR = "QAR"
    GTQ = "GTQ"
    ZAR = "ZAR"
    OMR = "OMR"
    KHR = "KHR"
    MVR = "MVR"
    IDR = "IDR"
    RUB = "RUB"
    RWF = "RWF"
    XDR = "XDR"
    SHP = "SHP"
    SAR = "SAR"
    RSD = "RSD"
    SCR = "SCR"
    XAG = "XAG"
    SGD = "SGD"
    SBD = "SBD"
    KGS = "KGS"
    SOS = "SOS"
    TJS = "TJS"
    SSP = "SSP"
    LKR = "LKR"
    XSU = "XSU"
    SDG = "SDG"
    SRD = "SRD"
    SEK = "SEK"
    CHF = "CHF"
    SYP = "SYP"
    BDT = "BDT"
    WST = "WST"
    TZS = "TZS"
    KZT = "KZT"
    XXX = "XXX"
    TTD = "TTD"
    MNT = "MNT"
    TND = "TND"
    TRY = "TRY"
    TMT = "TMT"
    TVD = "TVD"
    AED = "AED"
    XFU = "XFU"
    USD = "USD"
    USN = "USN"
    UGX = "UGX"
    CLF = "CLF"
    COU = "COU"
    UYI = "UYI"
    UYU = "UYU"
    UZS = "UZS"
    VUV = "VUV"
    CHE = "CHE"
    CHW = "CHW"
    KRW = "KRW"
    YER = "YER"
    JPY = "JPY"
    CNY = "CNY"
    ZMK = "ZMK"
    ZMW = "ZMW"
    ZWD = "ZWD"
    ZWN = "ZWN"
    ZWL = "ZWL"
    PLN = "PLN"

    allowable_values = [XUA, AFN, DZD, ARS, AMD, AWG, AUD, AZN, BSD, BHD, THB, PAB, BBD, BYN, BYR, BZD, BMD, BTN, VEF, BOB, XBA, BRL, BND, BGN, BIF, XOF, XAF, XPF, CAD, CVE, KYD, CLP, XTS, COP, KMF, CDF, BAM, NIO, CRC, HRK, CUP, CUC, CZK, GMD, DKK, MKD, DJF, STD, DOP, VND, XCD, EGP, SVC, ETB, EUR, XBB, XBD, XBC, FKP, FJD, HUF, GHS, GIP, XAU, XFO, PYG, GNF, GYD, HTG, HKD, UAH, ISK, INR, IRR, IQD, IMP, JMD, JOD, KES, PGK, LAK, KWD, AOA, MMK, GEL, LVL, LBP, ALL, HNL, SLL, LSL, LRD, LYD, SZL, LTL, MGA, MWK, MYR, TMM, MUR, MZN, MXV, MXN, MDL, MAD, BOV, NGN, ERN, NAD, NPR, ANG, ILS, RON, TWD, NZD, KPW, NOK, PEN, MRO, TOP, PKR, XPD, MOP, PHP, XPT, GBP, BWP, QAR, GTQ, ZAR, OMR, KHR, MVR, IDR, RUB, RWF, XDR, SHP, SAR, RSD, SCR, XAG, SGD, SBD, KGS, SOS, TJS, SSP, LKR, XSU, SDG, SRD, SEK, CHF, SYP, BDT, WST, TZS, KZT, XXX, TTD, MNT, TND, TRY, TMT, TVD, AED, XFU, USD, USN, UGX, CLF, COU, UYI, UYU, UZS, VUV, CHE, CHW, KRW, YER, JPY, CNY, ZMK, ZMW, ZWD, ZWN, ZWL, PLN]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """PayCurrencyEnum - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayCurrencyEnum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PayCurrencyEnum):
            return True

        return self.to_dict() != other.to_dict()
