# coding: utf-8

"""
    Merge HRIS API

    The unified API for building rich integrations with multiple HR Information System platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from MergeHRISClient.configuration import Configuration


class PatchedTimeOff(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'remote_id': 'str',
        'employee': 'str',
        'approver': 'str',
        'status': 'TimeOffStatusEnum',
        'employee_note': 'str',
        'units': 'UnitsEnum',
        'amount': 'float',
        'request_type': 'RequestTypeEnum'
    }

    attribute_map = {
        'id': 'id',
        'remote_id': 'remote_id',
        'employee': 'employee',
        'approver': 'approver',
        'status': 'status',
        'employee_note': 'employee_note',
        'units': 'units',
        'amount': 'amount',
        'request_type': 'request_type'
    }

    def __init__(self, id=None, remote_id=None, employee=None, approver=None, status=None, employee_note=None, units=None, amount=None, request_type=None, local_vars_configuration=None):  # noqa: E501
        """PatchedTimeOff - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._remote_id = None
        self._employee = None
        self._approver = None
        self._status = None
        self._employee_note = None
        self._units = None
        self._amount = None
        self._request_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.remote_id = remote_id
        self.employee = employee
        self.approver = approver
        self.status = status
        self.employee_note = employee_note
        self.units = units
        self.amount = amount
        self.request_type = request_type

    @property
    def id(self):
        """Gets the id of this PatchedTimeOff.  # noqa: E501


        :return: The id of this PatchedTimeOff.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatchedTimeOff.


        :param id: The id of this PatchedTimeOff.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def remote_id(self):
        """Gets the remote_id of this PatchedTimeOff.  # noqa: E501

        The third-party API ID of the matching object.  # noqa: E501

        :return: The remote_id of this PatchedTimeOff.  # noqa: E501
        :rtype: str
        """
        return self._remote_id

    @remote_id.setter
    def remote_id(self, remote_id):
        """Sets the remote_id of this PatchedTimeOff.

        The third-party API ID of the matching object.  # noqa: E501

        :param remote_id: The remote_id of this PatchedTimeOff.  # noqa: E501
        :type: str
        """

        self._remote_id = remote_id

    @property
    def employee(self):
        """Gets the employee of this PatchedTimeOff.  # noqa: E501

        The employee requesting time off.  # noqa: E501

        :return: The employee of this PatchedTimeOff.  # noqa: E501
        :rtype: str
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this PatchedTimeOff.

        The employee requesting time off.  # noqa: E501

        :param employee: The employee of this PatchedTimeOff.  # noqa: E501
        :type: str
        """

        self._employee = employee

    @property
    def approver(self):
        """Gets the approver of this PatchedTimeOff.  # noqa: E501

        The employee approving the time off request.  # noqa: E501

        :return: The approver of this PatchedTimeOff.  # noqa: E501
        :rtype: str
        """
        return self._approver

    @approver.setter
    def approver(self, approver):
        """Sets the approver of this PatchedTimeOff.

        The employee approving the time off request.  # noqa: E501

        :param approver: The approver of this PatchedTimeOff.  # noqa: E501
        :type: str
        """

        self._approver = approver

    @property
    def status(self):
        """Gets the status of this PatchedTimeOff.  # noqa: E501

        The status of this time off request.  # noqa: E501

        :return: The status of this PatchedTimeOff.  # noqa: E501
        :rtype: TimeOffStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PatchedTimeOff.

        The status of this time off request.  # noqa: E501

        :param status: The status of this PatchedTimeOff.  # noqa: E501
        :type: TimeOffStatusEnum
        """

        self._status = status

    @property
    def employee_note(self):
        """Gets the employee_note of this PatchedTimeOff.  # noqa: E501

        The status of this time off request.  # noqa: E501

        :return: The employee_note of this PatchedTimeOff.  # noqa: E501
        :rtype: str
        """
        return self._employee_note

    @employee_note.setter
    def employee_note(self, employee_note):
        """Sets the employee_note of this PatchedTimeOff.

        The status of this time off request.  # noqa: E501

        :param employee_note: The employee_note of this PatchedTimeOff.  # noqa: E501
        :type: str
        """

        self._employee_note = employee_note

    @property
    def units(self):
        """Gets the units of this PatchedTimeOff.  # noqa: E501

        The unit of time requested.  # noqa: E501

        :return: The units of this PatchedTimeOff.  # noqa: E501
        :rtype: UnitsEnum
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this PatchedTimeOff.

        The unit of time requested.  # noqa: E501

        :param units: The units of this PatchedTimeOff.  # noqa: E501
        :type: UnitsEnum
        """

        self._units = units

    @property
    def amount(self):
        """Gets the amount of this PatchedTimeOff.  # noqa: E501

        The number of time off units requested.  # noqa: E501

        :return: The amount of this PatchedTimeOff.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PatchedTimeOff.

        The number of time off units requested.  # noqa: E501

        :param amount: The amount of this PatchedTimeOff.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def request_type(self):
        """Gets the request_type of this PatchedTimeOff.  # noqa: E501

        The type of time off request.  # noqa: E501

        :return: The request_type of this PatchedTimeOff.  # noqa: E501
        :rtype: RequestTypeEnum
        """
        return self._request_type

    @request_type.setter
    def request_type(self, request_type):
        """Sets the request_type of this PatchedTimeOff.

        The type of time off request.  # noqa: E501

        :param request_type: The request_type of this PatchedTimeOff.  # noqa: E501
        :type: RequestTypeEnum
        """

        self._request_type = request_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PatchedTimeOff):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PatchedTimeOff):
            return True

        return self.to_dict() != other.to_dict()
