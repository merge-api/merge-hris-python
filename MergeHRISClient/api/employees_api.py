"""
    Merge HRIS API

    The unified API for building rich integrations with multiple HR Information System platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from MergeHRISClient.api_client import ApiClient, Endpoint as _Endpoint
from MergeHRISClient.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from MergeHRISClient.model.employee import Employee
from MergeHRISClient.model.employee_endpoint_request import EmployeeEndpointRequest
from MergeHRISClient.model.employee_response import EmployeeResponse
from MergeHRISClient.model.ignore_common_model import IgnoreCommonModel
from MergeHRISClient.model.ignore_common_model_request import IgnoreCommonModelRequest
from MergeHRISClient.model.meta_response import MetaResponse
from MergeHRISClient.model.paginated_employee_list import PaginatedEmployeeList


class EmployeesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __employees_create(
            self,
            x_account_token,
            employee_endpoint_request,
            **kwargs
        ):
            """employees_create  # noqa: E501

            Creates an `Employee` object with the given values.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.employees_create(x_account_token, employee_endpoint_request, async_req=True)
            >>> result = thread.get()

            Args:
                x_account_token (str): Token identifying the end user.
                employee_endpoint_request (EmployeeEndpointRequest):

            Keyword Args:
                is_debug_mode (bool): Whether to include debug fields (such as log file links) in the response.. [optional]
                run_async (bool): Whether or not third-party updates should be run asynchronously.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EmployeeResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['x_account_token'] = \
                x_account_token
            kwargs['employee_endpoint_request'] = \
                employee_endpoint_request
            return self.call_with_http_info(**kwargs)

        self.employees_create = _Endpoint(
            settings={
                'response_type': (EmployeeResponse,),
                'auth': [
                    'tokenAuth'
                ],
                'endpoint_path': '/employees',
                'operation_id': 'employees_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_account_token',
                    'employee_endpoint_request',
                    'is_debug_mode',
                    'run_async',
                ],
                'required': [
                    'x_account_token',
                    'employee_endpoint_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_account_token':
                        (str,),
                    'employee_endpoint_request':
                        (EmployeeEndpointRequest,),
                    'is_debug_mode':
                        (bool,),
                    'run_async':
                        (bool,),
                },
                'attribute_map': {
                    'x_account_token': 'X-Account-Token',
                    'is_debug_mode': 'is_debug_mode',
                    'run_async': 'run_async',
                },
                'location_map': {
                    'x_account_token': 'header',
                    'employee_endpoint_request': 'body',
                    'is_debug_mode': 'query',
                    'run_async': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__employees_create
        )

        def __employees_ignore_create(
            self,
            x_account_token,
            model_id,
            ignore_common_model_request,
            **kwargs
        ):
            """employees_ignore_create  # noqa: E501

            Ignores a specific row based on the `model_id` in the url. These records will have their properties set to null, and will not be updated in future syncs. The \"reason\" and \"message\" fields in the request body will be stored for audit purposes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.employees_ignore_create(x_account_token, model_id, ignore_common_model_request, async_req=True)
            >>> result = thread.get()

            Args:
                x_account_token (str): Token identifying the end user.
                model_id (str):
                ignore_common_model_request (IgnoreCommonModelRequest):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IgnoreCommonModel
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['x_account_token'] = \
                x_account_token
            kwargs['model_id'] = \
                model_id
            kwargs['ignore_common_model_request'] = \
                ignore_common_model_request
            return self.call_with_http_info(**kwargs)

        self.employees_ignore_create = _Endpoint(
            settings={
                'response_type': (IgnoreCommonModel,),
                'auth': [
                    'tokenAuth'
                ],
                'endpoint_path': '/employees/ignore/{model_id}',
                'operation_id': 'employees_ignore_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_account_token',
                    'model_id',
                    'ignore_common_model_request',
                ],
                'required': [
                    'x_account_token',
                    'model_id',
                    'ignore_common_model_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_account_token':
                        (str,),
                    'model_id':
                        (str,),
                    'ignore_common_model_request':
                        (IgnoreCommonModelRequest,),
                },
                'attribute_map': {
                    'x_account_token': 'X-Account-Token',
                    'model_id': 'model_id',
                },
                'location_map': {
                    'x_account_token': 'header',
                    'model_id': 'path',
                    'ignore_common_model_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'application/x-www-form-urlencoded',
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__employees_ignore_create
        )

        def __employees_list(
            self,
            x_account_token,
            **kwargs
        ):
            """employees_list  # noqa: E501

            Returns a list of `Employee` objects.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.employees_list(x_account_token, async_req=True)
            >>> result = thread.get()

            Args:
                x_account_token (str): Token identifying the end user.

            Keyword Args:
                company_id (str): If provided, will only return employees for this company.. [optional]
                created_after (datetime): If provided, will only return objects created after this datetime.. [optional]
                created_before (datetime): If provided, will only return objects created before this datetime.. [optional]
                cursor (str): The pagination cursor value.. [optional]
                display_full_name (str, none_type): If provided, will only return employees with this display name.. [optional]
                employment_status (str, none_type): If provided, will only return employees with this employment status.. [optional]
                first_name (str, none_type): If provided, will only return employees with this first name.. [optional]
                groups (str): If provided, will only return employees matching the group ids; multiple groups can be separated by commas.. [optional]
                include_deleted_data (bool): Whether to include data that was marked as deleted by third party webhooks.. [optional]
                include_remote_data (bool): Whether to include the original data Merge fetched from the third-party to produce these models.. [optional]
                include_sensitive_fields (bool): Whether to include sensitive fields (such as social security numbers) in the response.. [optional]
                last_name (str, none_type): If provided, will only return employees with this last name.. [optional]
                manager_id (str): If provided, will only return employees for this manager.. [optional]
                modified_after (datetime): If provided, will only return objects modified after this datetime.. [optional]
                modified_before (datetime): If provided, will only return objects modified before this datetime.. [optional]
                page_size (int): Number of results to return per page.. [optional]
                pay_group_id (str): If provided, will only return employees for this pay group. [optional]
                personal_email (str, none_type): If provided, will only return Employees with this personal email. [optional]
                remote_fields (str): Deprecated. Use show_enum_origins.. [optional]
                remote_id (str, none_type): The API provider's ID for the given object.. [optional]
                show_enum_origins (str): Which fields should be returned in non-normalized form.. [optional]
                team_id (str): If provided, will only return employees for this team.. [optional]
                work_email (str, none_type): If provided, will only return Employees with this work email. [optional]
                work_location_id (str): If provided, will only return employees for this location.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PaginatedEmployeeList
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['x_account_token'] = \
                x_account_token
            return self.call_with_http_info(**kwargs)

        self.employees_list = _Endpoint(
            settings={
                'response_type': (PaginatedEmployeeList,),
                'auth': [
                    'tokenAuth'
                ],
                'endpoint_path': '/employees',
                'operation_id': 'employees_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_account_token',
                    'company_id',
                    'created_after',
                    'created_before',
                    'cursor',
                    'display_full_name',
                    'employment_status',
                    'first_name',
                    'groups',
                    'include_deleted_data',
                    'include_remote_data',
                    'include_sensitive_fields',
                    'last_name',
                    'manager_id',
                    'modified_after',
                    'modified_before',
                    'page_size',
                    'pay_group_id',
                    'personal_email',
                    'remote_fields',
                    'remote_id',
                    'show_enum_origins',
                    'team_id',
                    'work_email',
                    'work_location_id',
                ],
                'required': [
                    'x_account_token',
                ],
                'nullable': [
                    'display_full_name',
                    'employment_status',
                    'first_name',
                    'last_name',
                    'personal_email',
                    'remote_id',
                    'work_email',
                ],
                'enum': [
                    'employment_status',
                    'remote_fields',
                    'show_enum_origins',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('employment_status',): {
                        'None': None,
                        "ACTIVE": "ACTIVE",
                        "INACTIVE": "INACTIVE",
                        "PENDING": "PENDING"
                    },
                    ('remote_fields',): {

                        "EMPLOYMENT_STATUS": "employment_status",
                        "EMPLOYMENT_STATUS,ETHNICITY": "employment_status,ethnicity",
                        "EMPLOYMENT_STATUS,ETHNICITY,GENDER": "employment_status,ethnicity,gender",
                        "EMPLOYMENT_STATUS,ETHNICITY,GENDER,MARITAL_STATUS": "employment_status,ethnicity,gender,marital_status",
                        "EMPLOYMENT_STATUS,ETHNICITY,MARITAL_STATUS": "employment_status,ethnicity,marital_status",
                        "EMPLOYMENT_STATUS,GENDER": "employment_status,gender",
                        "EMPLOYMENT_STATUS,GENDER,MARITAL_STATUS": "employment_status,gender,marital_status",
                        "EMPLOYMENT_STATUS,MARITAL_STATUS": "employment_status,marital_status",
                        "ETHNICITY": "ethnicity",
                        "ETHNICITY,GENDER": "ethnicity,gender",
                        "ETHNICITY,GENDER,MARITAL_STATUS": "ethnicity,gender,marital_status",
                        "ETHNICITY,MARITAL_STATUS": "ethnicity,marital_status",
                        "GENDER": "gender",
                        "GENDER,MARITAL_STATUS": "gender,marital_status",
                        "MARITAL_STATUS": "marital_status"
                    },
                    ('show_enum_origins',): {

                        "EMPLOYMENT_STATUS": "employment_status",
                        "EMPLOYMENT_STATUS,ETHNICITY": "employment_status,ethnicity",
                        "EMPLOYMENT_STATUS,ETHNICITY,GENDER": "employment_status,ethnicity,gender",
                        "EMPLOYMENT_STATUS,ETHNICITY,GENDER,MARITAL_STATUS": "employment_status,ethnicity,gender,marital_status",
                        "EMPLOYMENT_STATUS,ETHNICITY,MARITAL_STATUS": "employment_status,ethnicity,marital_status",
                        "EMPLOYMENT_STATUS,GENDER": "employment_status,gender",
                        "EMPLOYMENT_STATUS,GENDER,MARITAL_STATUS": "employment_status,gender,marital_status",
                        "EMPLOYMENT_STATUS,MARITAL_STATUS": "employment_status,marital_status",
                        "ETHNICITY": "ethnicity",
                        "ETHNICITY,GENDER": "ethnicity,gender",
                        "ETHNICITY,GENDER,MARITAL_STATUS": "ethnicity,gender,marital_status",
                        "ETHNICITY,MARITAL_STATUS": "ethnicity,marital_status",
                        "GENDER": "gender",
                        "GENDER,MARITAL_STATUS": "gender,marital_status",
                        "MARITAL_STATUS": "marital_status"
                    },
                },
                'openapi_types': {
                    'x_account_token':
                        (str,),
                    'company_id':
                        (str,),
                    'created_after':
                        (datetime,),
                    'created_before':
                        (datetime,),
                    'cursor':
                        (str,),
                    'display_full_name':
                        (str, none_type,),
                    'employment_status':
                        (str, none_type,),
                    'first_name':
                        (str, none_type,),
                    'groups':
                        (str,),
                    'include_deleted_data':
                        (bool,),
                    'include_remote_data':
                        (bool,),
                    'include_sensitive_fields':
                        (bool,),
                    'last_name':
                        (str, none_type,),
                    'manager_id':
                        (str,),
                    'modified_after':
                        (datetime,),
                    'modified_before':
                        (datetime,),
                    'page_size':
                        (int,),
                    'pay_group_id':
                        (str,),
                    'personal_email':
                        (str, none_type,),
                    'remote_fields':
                        (str,),
                    'remote_id':
                        (str, none_type,),
                    'show_enum_origins':
                        (str,),
                    'team_id':
                        (str,),
                    'work_email':
                        (str, none_type,),
                    'work_location_id':
                        (str,),
                },
                'attribute_map': {
                    'x_account_token': 'X-Account-Token',
                    'company_id': 'company_id',
                    'created_after': 'created_after',
                    'created_before': 'created_before',
                    'cursor': 'cursor',
                    'display_full_name': 'display_full_name',
                    'employment_status': 'employment_status',
                    'first_name': 'first_name',
                    'groups': 'groups',
                    'include_deleted_data': 'include_deleted_data',
                    'include_remote_data': 'include_remote_data',
                    'include_sensitive_fields': 'include_sensitive_fields',
                    'last_name': 'last_name',
                    'manager_id': 'manager_id',
                    'modified_after': 'modified_after',
                    'modified_before': 'modified_before',
                    'page_size': 'page_size',
                    'pay_group_id': 'pay_group_id',
                    'personal_email': 'personal_email',
                    'remote_fields': 'remote_fields',
                    'remote_id': 'remote_id',
                    'show_enum_origins': 'show_enum_origins',
                    'team_id': 'team_id',
                    'work_email': 'work_email',
                    'work_location_id': 'work_location_id',
                },
                'location_map': {
                    'x_account_token': 'header',
                    'company_id': 'query',
                    'created_after': 'query',
                    'created_before': 'query',
                    'cursor': 'query',
                    'display_full_name': 'query',
                    'employment_status': 'query',
                    'first_name': 'query',
                    'groups': 'query',
                    'include_deleted_data': 'query',
                    'include_remote_data': 'query',
                    'include_sensitive_fields': 'query',
                    'last_name': 'query',
                    'manager_id': 'query',
                    'modified_after': 'query',
                    'modified_before': 'query',
                    'page_size': 'query',
                    'pay_group_id': 'query',
                    'personal_email': 'query',
                    'remote_fields': 'query',
                    'remote_id': 'query',
                    'show_enum_origins': 'query',
                    'team_id': 'query',
                    'work_email': 'query',
                    'work_location_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__employees_list
        )

        def __employees_meta_post_retrieve(
            self,
            x_account_token,
            **kwargs
        ):
            """employees_meta_post_retrieve  # noqa: E501

            Returns metadata for `Employee` POSTs.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.employees_meta_post_retrieve(x_account_token, async_req=True)
            >>> result = thread.get()

            Args:
                x_account_token (str): Token identifying the end user.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MetaResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['x_account_token'] = \
                x_account_token
            return self.call_with_http_info(**kwargs)

        self.employees_meta_post_retrieve = _Endpoint(
            settings={
                'response_type': (MetaResponse,),
                'auth': [
                    'tokenAuth'
                ],
                'endpoint_path': '/employees/meta/post',
                'operation_id': 'employees_meta_post_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_account_token',
                ],
                'required': [
                    'x_account_token',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_account_token':
                        (str,),
                },
                'attribute_map': {
                    'x_account_token': 'X-Account-Token',
                },
                'location_map': {
                    'x_account_token': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__employees_meta_post_retrieve
        )

        def __employees_retrieve(
            self,
            x_account_token,
            id,
            **kwargs
        ):
            """employees_retrieve  # noqa: E501

            Returns an `Employee` object with the given `id`.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.employees_retrieve(x_account_token, id, async_req=True)
            >>> result = thread.get()

            Args:
                x_account_token (str): Token identifying the end user.
                id (str):

            Keyword Args:
                include_remote_data (bool): Whether to include the original data Merge fetched from the third-party to produce these models.. [optional]
                include_sensitive_fields (bool): Whether to include sensitive fields (such as social security numbers) in the response.. [optional]
                remote_fields (str): Deprecated. Use show_enum_origins.. [optional]
                show_enum_origins (str): Which fields should be returned in non-normalized form.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Employee
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['x_account_token'] = \
                x_account_token
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.employees_retrieve = _Endpoint(
            settings={
                'response_type': (Employee,),
                'auth': [
                    'tokenAuth'
                ],
                'endpoint_path': '/employees/{id}',
                'operation_id': 'employees_retrieve',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_account_token',
                    'id',
                    'include_remote_data',
                    'include_sensitive_fields',
                    'remote_fields',
                    'show_enum_origins',
                ],
                'required': [
                    'x_account_token',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                    'remote_fields',
                    'show_enum_origins',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('remote_fields',): {

                        "EMPLOYMENT_STATUS": "employment_status",
                        "EMPLOYMENT_STATUS,ETHNICITY": "employment_status,ethnicity",
                        "EMPLOYMENT_STATUS,ETHNICITY,GENDER": "employment_status,ethnicity,gender",
                        "EMPLOYMENT_STATUS,ETHNICITY,GENDER,MARITAL_STATUS": "employment_status,ethnicity,gender,marital_status",
                        "EMPLOYMENT_STATUS,ETHNICITY,MARITAL_STATUS": "employment_status,ethnicity,marital_status",
                        "EMPLOYMENT_STATUS,GENDER": "employment_status,gender",
                        "EMPLOYMENT_STATUS,GENDER,MARITAL_STATUS": "employment_status,gender,marital_status",
                        "EMPLOYMENT_STATUS,MARITAL_STATUS": "employment_status,marital_status",
                        "ETHNICITY": "ethnicity",
                        "ETHNICITY,GENDER": "ethnicity,gender",
                        "ETHNICITY,GENDER,MARITAL_STATUS": "ethnicity,gender,marital_status",
                        "ETHNICITY,MARITAL_STATUS": "ethnicity,marital_status",
                        "GENDER": "gender",
                        "GENDER,MARITAL_STATUS": "gender,marital_status",
                        "MARITAL_STATUS": "marital_status"
                    },
                    ('show_enum_origins',): {

                        "EMPLOYMENT_STATUS": "employment_status",
                        "EMPLOYMENT_STATUS,ETHNICITY": "employment_status,ethnicity",
                        "EMPLOYMENT_STATUS,ETHNICITY,GENDER": "employment_status,ethnicity,gender",
                        "EMPLOYMENT_STATUS,ETHNICITY,GENDER,MARITAL_STATUS": "employment_status,ethnicity,gender,marital_status",
                        "EMPLOYMENT_STATUS,ETHNICITY,MARITAL_STATUS": "employment_status,ethnicity,marital_status",
                        "EMPLOYMENT_STATUS,GENDER": "employment_status,gender",
                        "EMPLOYMENT_STATUS,GENDER,MARITAL_STATUS": "employment_status,gender,marital_status",
                        "EMPLOYMENT_STATUS,MARITAL_STATUS": "employment_status,marital_status",
                        "ETHNICITY": "ethnicity",
                        "ETHNICITY,GENDER": "ethnicity,gender",
                        "ETHNICITY,GENDER,MARITAL_STATUS": "ethnicity,gender,marital_status",
                        "ETHNICITY,MARITAL_STATUS": "ethnicity,marital_status",
                        "GENDER": "gender",
                        "GENDER,MARITAL_STATUS": "gender,marital_status",
                        "MARITAL_STATUS": "marital_status"
                    },
                },
                'openapi_types': {
                    'x_account_token':
                        (str,),
                    'id':
                        (str,),
                    'include_remote_data':
                        (bool,),
                    'include_sensitive_fields':
                        (bool,),
                    'remote_fields':
                        (str,),
                    'show_enum_origins':
                        (str,),
                },
                'attribute_map': {
                    'x_account_token': 'X-Account-Token',
                    'id': 'id',
                    'include_remote_data': 'include_remote_data',
                    'include_sensitive_fields': 'include_sensitive_fields',
                    'remote_fields': 'remote_fields',
                    'show_enum_origins': 'show_enum_origins',
                },
                'location_map': {
                    'x_account_token': 'header',
                    'id': 'path',
                    'include_remote_data': 'query',
                    'include_sensitive_fields': 'query',
                    'remote_fields': 'query',
                    'show_enum_origins': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__employees_retrieve
        )
