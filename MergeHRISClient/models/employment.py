# coding: utf-8

"""
    Merge HRIS API

    The unified API for building rich integrations with multiple HR Information System platforms.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: hello@merge.dev
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from MergeHRISClient.configuration import Configuration


class Employment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'origin_id': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'job_title': 'str',
        'pay_rate': 'float',
        'pay_period': 'OneOfPayPeriodEnumBlankEnumNullEnum',
        'pay_frequency': 'OneOfPayFrequencyEnumBlankEnumNullEnum',
        'pay_currency': 'OneOfPayCurrencyEnumBlankEnumNullEnum',
        'fisa_status': 'OneOfFisaStatusEnumBlankEnumNullEnum',
        'effective_date': 'datetime',
        'employment_type': 'OneOfEmploymentTypeEnumBlankEnumNullEnum'
    }

    attribute_map = {
        'id': 'id',
        'origin_id': 'origin_id',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'job_title': 'job_title',
        'pay_rate': 'pay_rate',
        'pay_period': 'pay_period',
        'pay_frequency': 'pay_frequency',
        'pay_currency': 'pay_currency',
        'fisa_status': 'fisa_status',
        'effective_date': 'effective_date',
        'employment_type': 'employment_type'
    }

    def __init__(self, id=None, origin_id=None, created_at=None, modified_at=None, job_title=None, pay_rate=None, pay_period=None, pay_frequency=None, pay_currency=None, fisa_status=None, effective_date=None, employment_type=None, local_vars_configuration=None):  # noqa: E501
        """Employment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._origin_id = None
        self._created_at = None
        self._modified_at = None
        self._job_title = None
        self._pay_rate = None
        self._pay_period = None
        self._pay_frequency = None
        self._pay_currency = None
        self._fisa_status = None
        self._effective_date = None
        self._employment_type = None
        self.discriminator = None

        self.id = id
        self.origin_id = origin_id
        self.created_at = created_at
        self.modified_at = modified_at
        self.job_title = job_title
        self.pay_rate = pay_rate
        self.pay_period = pay_period
        self.pay_frequency = pay_frequency
        self.pay_currency = pay_currency
        self.fisa_status = fisa_status
        self.effective_date = effective_date
        self.employment_type = employment_type

    @property
    def id(self):
        """Gets the id of this Employment.  # noqa: E501


        :return: The id of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Employment.


        :param id: The id of this Employment.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def origin_id(self):
        """Gets the origin_id of this Employment.  # noqa: E501

        The third-party API ID of the matching object.  # noqa: E501

        :return: The origin_id of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._origin_id

    @origin_id.setter
    def origin_id(self, origin_id):
        """Sets the origin_id of this Employment.

        The third-party API ID of the matching object.  # noqa: E501

        :param origin_id: The origin_id of this Employment.  # noqa: E501
        :type: str
        """

        self._origin_id = origin_id

    @property
    def created_at(self):
        """Gets the created_at of this Employment.  # noqa: E501


        :return: The created_at of this Employment.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Employment.


        :param created_at: The created_at of this Employment.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this Employment.  # noqa: E501


        :return: The modified_at of this Employment.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this Employment.


        :param modified_at: The modified_at of this Employment.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and modified_at is None:  # noqa: E501
            raise ValueError("Invalid value for `modified_at`, must not be `None`")  # noqa: E501

        self._modified_at = modified_at

    @property
    def job_title(self):
        """Gets the job_title of this Employment.  # noqa: E501

        The position's title.  # noqa: E501

        :return: The job_title of this Employment.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Employment.

        The position's title.  # noqa: E501

        :param job_title: The job_title of this Employment.  # noqa: E501
        :type: str
        """

        self._job_title = job_title

    @property
    def pay_rate(self):
        """Gets the pay_rate of this Employment.  # noqa: E501

        The position's pay rate in dollars.  # noqa: E501

        :return: The pay_rate of this Employment.  # noqa: E501
        :rtype: float
        """
        return self._pay_rate

    @pay_rate.setter
    def pay_rate(self, pay_rate):
        """Sets the pay_rate of this Employment.

        The position's pay rate in dollars.  # noqa: E501

        :param pay_rate: The pay_rate of this Employment.  # noqa: E501
        :type: float
        """

        self._pay_rate = pay_rate

    @property
    def pay_period(self):
        """Gets the pay_period of this Employment.  # noqa: E501

        The time period this pay rate encompasses  # noqa: E501

        :return: The pay_period of this Employment.  # noqa: E501
        :rtype: OneOfPayPeriodEnumBlankEnumNullEnum
        """
        return self._pay_period

    @pay_period.setter
    def pay_period(self, pay_period):
        """Sets the pay_period of this Employment.

        The time period this pay rate encompasses  # noqa: E501

        :param pay_period: The pay_period of this Employment.  # noqa: E501
        :type: OneOfPayPeriodEnumBlankEnumNullEnum
        """

        self._pay_period = pay_period

    @property
    def pay_frequency(self):
        """Gets the pay_frequency of this Employment.  # noqa: E501

        The position's pay frequency.  # noqa: E501

        :return: The pay_frequency of this Employment.  # noqa: E501
        :rtype: OneOfPayFrequencyEnumBlankEnumNullEnum
        """
        return self._pay_frequency

    @pay_frequency.setter
    def pay_frequency(self, pay_frequency):
        """Sets the pay_frequency of this Employment.

        The position's pay frequency.  # noqa: E501

        :param pay_frequency: The pay_frequency of this Employment.  # noqa: E501
        :type: OneOfPayFrequencyEnumBlankEnumNullEnum
        """

        self._pay_frequency = pay_frequency

    @property
    def pay_currency(self):
        """Gets the pay_currency of this Employment.  # noqa: E501

        The position's currency code.  # noqa: E501

        :return: The pay_currency of this Employment.  # noqa: E501
        :rtype: OneOfPayCurrencyEnumBlankEnumNullEnum
        """
        return self._pay_currency

    @pay_currency.setter
    def pay_currency(self, pay_currency):
        """Sets the pay_currency of this Employment.

        The position's currency code.  # noqa: E501

        :param pay_currency: The pay_currency of this Employment.  # noqa: E501
        :type: OneOfPayCurrencyEnumBlankEnumNullEnum
        """

        self._pay_currency = pay_currency

    @property
    def fisa_status(self):
        """Gets the fisa_status of this Employment.  # noqa: E501

        The position's FISA status.  # noqa: E501

        :return: The fisa_status of this Employment.  # noqa: E501
        :rtype: OneOfFisaStatusEnumBlankEnumNullEnum
        """
        return self._fisa_status

    @fisa_status.setter
    def fisa_status(self, fisa_status):
        """Sets the fisa_status of this Employment.

        The position's FISA status.  # noqa: E501

        :param fisa_status: The fisa_status of this Employment.  # noqa: E501
        :type: OneOfFisaStatusEnumBlankEnumNullEnum
        """

        self._fisa_status = fisa_status

    @property
    def effective_date(self):
        """Gets the effective_date of this Employment.  # noqa: E501

        The position's effective date.  # noqa: E501

        :return: The effective_date of this Employment.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this Employment.

        The position's effective date.  # noqa: E501

        :param effective_date: The effective_date of this Employment.  # noqa: E501
        :type: datetime
        """

        self._effective_date = effective_date

    @property
    def employment_type(self):
        """Gets the employment_type of this Employment.  # noqa: E501

        The position's type of employment.  # noqa: E501

        :return: The employment_type of this Employment.  # noqa: E501
        :rtype: OneOfEmploymentTypeEnumBlankEnumNullEnum
        """
        return self._employment_type

    @employment_type.setter
    def employment_type(self, employment_type):
        """Sets the employment_type of this Employment.

        The position's type of employment.  # noqa: E501

        :param employment_type: The employment_type of this Employment.  # noqa: E501
        :type: OneOfEmploymentTypeEnumBlankEnumNullEnum
        """

        self._employment_type = employment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Employment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Employment):
            return True

        return self.to_dict() != other.to_dict()
